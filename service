#!/usr/bin/python2.7
import time
import sys
import pytz
import serial
from datetime import datetime
from hosted import config, device

status0On = False
status1On = False

ser0 = serial.Serial(
    port='/dev/ttyUSB0',
    baudrate=9600,
    parity=serial.PARITY_NONE,
    stopbits=serial.STOPBITS_ONE,
    bytesize=serial.EIGHTBITS
)

#ser1 = serial.Serial(
#    port='/dev/ttyUSB1',
#    baudrate=9600,
#    parity=serial.PARITY_NONE,
#    stopbits=serial.STOPBITS_ONE,
#    bytesize=serial.EIGHTBITS
#)

if ser0.isOpen() : 
    ser0.close()
ser0.open()

#if ser1.isOpen() : 
#    ser1.close()
#ser1.open()

ser0.write('\r*pow=?#\r')
status0 = ''
time.sleep(1)
while ser0.inWaiting() > 0:
    status0 += ser0.read(1)

if 'ON' in status0:
    status0On = True
    
#ser1.write('\r*pow=?#\r')
#status1 = ''
#time.sleep(1)
#while ser1.inWaiting() > 0:
#    status1 += ser1.read(1)

#if 'ON' in status1:
#    status1On = True

config.restart_on_update()

tz = pytz.timezone(config.timezone)

device.screen(on = True)
while time.time() < 10000000:
    print >>sys.stderr, "waiting for correct system time"
    time.sleep(1)

time.sleep(15)

while 1:
    now = pytz.utc.localize(datetime.utcnow(), is_dst=None).astimezone(tz)
    print >>sys.stderr, now

    dow = now.weekday()
    hour = now.hour
    hour = dow * 24 + hour
    print >>sys.stderr, "Hour: %d" % hour
    
    try:
        on = config.times[hour]
    except IndexError:
        on = True
    print >>sys.stderr, "Screen on: %r" % on

    if on:
        if not status0On:
             if ser0.isOpen() : 
                 ser0.close()
                 ser0.open()

                 ser0.write('\r*pow=on#\r')
                 status0 = ''
                 time.sleep(1)
                 while ser0.inWaiting() > 0:
                     status0 += ser0.read(1)

                 if 'ON' in status0:
                     status0On = True
                 else:
                     status0On = False
#       if not status1On:
#            if ser1.isOpen() : 
#                ser1.close()
#                ser1.open()

#                ser1.write('\r*pow=on#\r')
#                 status1 = ''
#                 time.sleep(1)
#                 while ser1.inWaiting() > 0:
#                     status1 += ser1.read(1)

#                 if 'ON' in status1:
#                     status1On = True
#                 else:
#                     status1On = False
    else:
        if status0On:
             if ser0.isOpen() : 
                 ser0.close()
                 ser0.open()

                 ser0.write('\r*pow=off#\r')
                 status0 = ''
                 time.sleep(1)
                 while ser0.inWaiting() > 0:
                     status0 += ser0.read(1)

                 if 'OFF' in status0:
                     status0On = False
                 else:
                     status0On = True
#        if status1On:
#             if ser1.isOpen() : 
#                 ser1.close()
#                 ser1.open()

#                 ser1.write('\r*pow=off#\r')
#                 status1 = ''
#                 time.sleep(1)
#                 while ser1.inWaiting() > 0:
#                     status1 += ser1.read(1)

#                 if 'OFF' in status1:
#                     status1On = False
#                 else:
#                     status1On = True
    device.screen(on = on)

    time.sleep(60)
